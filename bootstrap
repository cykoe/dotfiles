#!/bin/bash
#
# bootstrap and installs things.

cd "$(dirname "$0")" || exit
DOTFILES_ROOT=$(pwd -P)

echo ''

info () {
  echo -e "\r  [ \033[00;34m👀\033[0m ] $1"
}

user () {
  echo -en "\r  [ \033[10;33m💩\033[0m ] $1 "
}

success () {
  echo -e "\r\033[2K  [ \033[00;32m👍\033[0m ] $1"
}

harness () {
  if [ $? -eq 0 ]; then
    success "$1 is installed"
  else
    echo -e "\r\033[2K  [ \033[0;31mFAIL\033[0m ] $1"
    echo ''
    exit
  fi
}

fail () {
  echo -e "\r\033[2K  [ \033[0;31mFAIL\033[0m ] $1"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]; then
    info 'setup gitconfig'

    git_credential='cache'

		if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user 'what is your github username?'
    read -e git_username
    user 'what is your github email?'
    read -e git_email

    sed -e "s/USERNAME/$git_username/g" -e "s/EMAIL/$git_email/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  # -f returns true if file exists
  # -o returns true if the shell option opt is enabled
  # -d returns true if the file is a directory
  # -L returns true if the file is a symbolic link
  # expr1 -a expr2 returns true if expression1 and expression2 are both not null
  # expr1 -o expr2 return true if either of the expressions expr1 or expr2 are not null

  # if the destination file exists, or is a folder, or is a symbolic link
  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      ## get the value of the original linked file
      local currentSrc="$(readlink $dst)"

      ## make sure the there is no existing linked folder
      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "file already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles...'

  local overwrite_all=false backup_all=false skip_all=false

  ## find all the symlink ending files
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    ## remove the trailing suffix, i.e., symlink, and do the linking
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_nvm() {
  info 'installing nvm...'
  if [ ! -f "$HOME/.nvm/nvm.sh" ]; then
    curl -o- -s https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash &> /dev/null
    harness "nvm"
  else
    success 'skipped nvm'
  fi
}

install_node() {
  info 'installing node...'
  command -v node &> /dev/null
  if [ $? -ne 0 ]; then
    . "$HOME/.bashrc"
    . "$NVM_DIR/nvm.sh"
    nvm install node --lts &> /dev/null
    harness 'node'
  else
    success 'skipped node'
  fi
}

install_vundle() {
  info 'installing vundle...'
  if [ ! -d "$HOME/.vim/bundle/Vundle.vim" ]; then
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim &> /dev/null
    harness "vundle"
  else
    success 'skipped vundle'
  fi
}

install_git_prompt() {
  info 'installing git-prompt...'
  if [ ! -d "$HOME/.bash-git-prompt" ]; then
    git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1 &> /dev/null
    harness 'git-prompt'
  else
    success 'skipped bash-git-prompt'
  fi
}

check_prerequisite () {
  info 'checking prerequisite softwares...'
  if  ! command -v curl &> /dev/null ; then
    fail 'please install curl'
  fi
  if  ! command -v vim &> /dev/null ; then
    fail 'Vim is required'
  fi
  success 'prerequisite softwares installed'
}

install_software () {
  install_nvm
  install_node
  install_vundle
  install_git_prompt
}

check_prerequisite

setup_gitconfig

install_dotfiles

install_software

echo ''
success 'Everything is installed!'
echo ''
info "Run 'source ~/.bashrc' to activate paths and env variables!"
info "Run 'vim +PluginInstall +qall' in vim to setup more vim!"
info "Vim language server requires installation of Yarn, please do so."
info "If encounter module not found error during package installing with yarn, remove yarn.lock in ~/.vim/bundle/coc.nvim"
info "To make terminal compatible with some icons in vim, install delugia-code at https://github.com/adam7/delugia-code"
info "And intall tmux themepack at https://github.com/jimeh/tmux-themepack"
echo ''
