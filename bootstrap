#!/bin/bash
#
# bootstrap and installs things.

cd "$(dirname "$0")" || exit
DOTFILES_ROOT=$(pwd -P)

echo ''

info () {
  echo -e "\r  [ \033[00;34m👀\033[0m ] $1"
}

user () {
  echo -en "\r  [ \033[10;33m💩\033[0m ] $1 "
}

success () {
  echo -e "\r\033[2K  [ \033[00;32m👍\033[0m ] $1"
}

fail () {
  if [ $? -eq 0 ]; then
    success "$1 is installed"
  else
    echo -e "\r\033[2K  [ \033[0;31mFAIL\033[0m ] error installing $1"
    echo ''
    exit
  fi
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]; then
    info 'setup gitconfig'

    git_credential='cache'
    
		if [ "$(uname -s)" == "Darwin" ]; then
      git_credential='osxkeychain'
    fi

    user 'what is your github username?'
    read -e git_username
    user 'what is your github email?'
    read -e git_email

    sed -e "s/USERNAME/$git_username/g" -e "s/EMAIL/$git_email/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

    success 'gitconfig'
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  # -f returns true if file exists
  # -o returns true if the shell option opt is enabled
  # -d returns true if the file is a directory
  # -L returns true if the file is a symbolic link
  # expr1 -a expr2 returns true if expression1 and expression2 are both not null
  # expr1 -o expr2 return true if either of the expressions expr1 or expr2 are not null

  # if the destination file exists, or is a folder, or is a symbolic link
  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      ## get the value of the original linked file
      local currentSrc="$(readlink $dst)"

      ## make sure the there is no existing linked folder
      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "file already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles...'

  local overwrite_all=false backup_all=false skip_all=false

  ## find all the symlink ending files
  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    ## remove the trailing suffix, i.e., symlink, and do the linking
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_vim() {
  info 'installing nvm...'
  if [ ! -f "$HOME/.nvm/nvm.sh" ]; then
    curl -o- -s https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash &> /dev/null
    fail "nvm"
  else
    success 'skipped nvm'
  fi
}

install_node() {
  info 'installing node...'
  command -v node &> /dev/null
  if [ $? -ne 0 ]; then
    . "$HOME/.bashrc"
    . "$NVM_DIR/nvm.sh"
    nvm install node --lts &> /dev/null
    fail 'node'
  else
    success 'skipped node'
  fi
}

install_vundle() {
  info 'installing vundle...'
  if [ ! -d "$HOME/.vim/bundle/Vundle.vim" ]; then
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim &> /dev/null
    fail "vundle"
  else
    success 'skipped vundle'
  fi
}

install_git_prompt() {
  info 'installing git-prompt...'
  if [ ! -d "$HOME/.bash-git-prompt" ]; then
    git clone https://github.com/magicmonty/bash-git-prompt.git ~/.bash-git-prompt --depth=1 &> /dev/null
    fail 'git-prompt'
  else
    success 'skipped bash-git-prompt'
  fi
}

install_nvim() {
  info 'installing neovim...'

  if [ ! -d "$HOME/squashfs-root" ]; then
    cd $HOME
    curl -LOs https://github.com/neovim/neovim/releases/download/v0.4.3/nvim.appimage
    chmod u+x ./nvim.appimage
    ./nvim.appimage --appimage-extract &> /dev/null
    rm ./nvim.appimage
    fail 'neovim'
    cd $DOTFILES_ROOT
    mkdir -p $HOME/.config/nvim
    touch $HOME/.config/nvim/init.vim
    echo -e "set runtimepath^=~/.vim runtimepath+=~/.vim/after\nlet &packpath = &runtimepath\nsource ~/.vimrc" > $HOME/.config/nvim/init.vim
  else
    success 'skipped neovim'
  fi
}

install_software () {
  install_vim
  install_node
  install_vundle
  install_git_prompt
  #install_nvim
}

setup_gitconfig

install_dotfiles

install_software

echo ''
success 'Everything is installed!'
echo ''
info "Run 'source ~/.bashrc' to activate paths and env variables!"
info "Run 'vim +PluginInstall +qall' in vim to setup more vim!"
echo ''
