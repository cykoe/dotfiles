"            _
"           | |
"  ___ _   _| | _____   ___
" / __| | | | |/ / _ \ / _ \
" | (__| |_| |   < (_) |  __/
" \___|\__, |_|\_\___/ \___|
"       __/ |
"      |___/
" =============================
" Plugins {{{
" Enable modern vim feature not compatible with Vi spec.
set nocompatible

filetype off
set rtp+=~/.vim/bundle/Vundle.vim
if isdirectory(expand('$HOME/.vim/bundle/Vundle.vim'))
  call vundle#begin()
  Plugin 'VundleVim/Vundle.vim' " vundle package manager
  Plugin 'neoclide/coc.nvim', {'branch': 'release'} " code completion
  Plugin 'morhetz/gruvbox' " theme
  Plugin 'roxma/vim-paste-easy' " automatic paste mode
  Plugin 'scrooloose/nerdtree' " file system explorer
  Plugin 'jistr/vim-nerdtree-tabs' " show just one NERDTree in all tabs
  Plugin 'tiagofumo/vim-nerdtree-syntax-highlight' " extra syntax and highlight for nerdtree files
  Plugin 'ryanoasis/vim-devicons' " support filetype glyphs
  Plugin 'matze/vim-move' " move line/selections up/down
  Plugin 'mattn/emmet-vim' " emmet for vim
  Plugin 'vim-syntastic/syntastic' " Display syntax errors
  Plugin 'preservim/nerdcommenter' " comment codes
  Plugin 'christoomey/vim-tmux-navigator' " navigate seamlessly between vim and tmux splits
  Plugin 'junegunn/fzf' " file finder
  Plugin 'junegunn/fzf.vim' " file finder for vim
  Plugin 'vimwiki/vimwiki' " notes app for vim
  Plugin 'vim-airline/vim-airline' " cool status lines for vim
  Plugin 'vim-airline/vim-airline-themes' " cool themes
  call vundle#end()
else
  echomsg 'Vundle is not installed. You can install Vundle from'
    \ 'https://github.com/VundleVim/Vundle.vim'
endif

filetype plugin indent on
" }}}
" Vimwiki {{{
let g:vimwiki_list = [{
  \'path': $HOME.'/vimwiki/',
  \'syntax': 'markdown',
  \'ext': '.md'}]
" }}}
" Airline {{{
" Show tabs on top of the screen
let g:airline#extensions#tabline#enabled = 1
" Show splitted file name when focus
let g:airline#extensions#tabline#show_splits = 0
" Hide buffers from tabs
let g:airline#extensions#tabline#show_buffers = 0
" populate airline symbols with powerline symbols
let g:airline_powerline_fonts = 1
let g:airline_theme='cool'
" }}}
" Tmux {{{
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <nop> :TmuxNavigatePrevious<cr>
"}}}
" NerdTree {{{
let NERDTreeIgnore=['^node_modules$']

" Close vim when NERDTree is the only window left
augroup close_nerd_tree
  autocmd!
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup end
"}}}
" Emmet {{{
" Enable emmet and make mapping works for selected file types
let g:user_emmet_install_global = 0
augroup enable_emmet
  autocmd!
  autocmd FileType html,css,typescriptreact,javascript EmmetInstall
augroup end
" }}}
" Conquer of Completion {{{
set hidden " TextEdit might fail if hidden is not set

set nobackup " Some servers have issues with backup files
set nowritebackup
set noswapfile

set shortmess+=c " Don't pass messages to |ins-completion-menu|

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction"

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

let g:coc_global_extensions = [
  \ 'coc-angular',
  \ 'coc-tsserver',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-json',
  \ 'coc-snippets',
  \ 'coc-prettier',
  \ ]

" coc-prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" }}}
" Term {{{
" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
if &term =~ '256color'
    set t_ut=
endif

" Tmux will send xterm-style keys when its xterm-keys option is on
if &term =~ '^screen'
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif
" }}}
" Vim (options) {{{
let mapleader = '\' " set the leader key

set bs=2 " allow backspace deletion

" Tab options
set tabstop=2 " set spaces numbers for tabbing
set expandtab " converts tabs to spaces

" Shifting options
set shiftwidth=2 " set spaces when shifting
set shiftround " rounds the indentation to nearest multiple of shiftwidth

" Searching options
set hlsearch " highlights searches
set ignorecase " ignore cases when searching
set smartcase " intelligent switch to case-sensitive when uppercase typed
set showmatch " highlights matching parentheses, braces, and brackets
set incsearch " highlights search results while typing"

" Performance options
set lazyredraw " don't update screen during macro and script execution
set noshowcmd " hide commands on the bottom-right corner
set cursorline " highlight the current line under cursor

" Line-number options
set nonumber " disable absolute line numbers
set relativenumber " use relative numbers in terms of current line
set numberwidth=2 " set line number column width (increase by 2)

" Text Rendering options
syntax enable " enable syntax highlighting
set encoding=utf-8 " supports unicode
set linebreak " avoid wrapping a line in the middle of a word
set scrolloff=2 " number of lines below the cursor
set wrap " enable line wrapping
set autoindent " new lines inherit the indentaton of previous lines

" Code Folding options
set foldenable " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10 " avoid nested folds
set foldmethod=indent " fold based on indention levels

" Miscellaneous options
set confirm " ask before closing an unsaved file
set history=50 " undo limit
set completeopt-=preview " close auto-completion preview for coc
set ttimeoutlen=50 " time in milliseconds to wait for a key code sequence to complete
set clipboard=unnamed " connect to system clipboard
set modelines=1 " run specific commands in a file on the first and last line of .vimrc
set cmdheight=1 " displaying messages box height
" }}}
" Mappings (operator-pending){{{
" From current cursor till the end
onoremap L $

" Inside parentheses
onoremap p i(

" Contents under a markdown header
onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
" }}}
" Mappings (insert){{{
" press ctrl+s save
inoremap <c-s> <esc>:w<cr>

" press ctrl+z to undo
inoremap <c-z> <c-o>:u<cr>

" convert the current word to uppercase
inoremap <c-u> <esc>viwUea

" map escape to jk
inoremap jk <esc>
" }}}
" Mappings (normal){{{
execute "set <M-j>=\ej"
execute "set <M-k>=\ek"

" Map ; to : to cut down on chording
 nnoremap ; :

" close window
nnoremap <c-w> :q<cr>

" move down by visual line
nnoremap j gj

" move up by visual line
nnoremap k gk

" press ctrl+s to save
nnoremap <c-s> :w<cr>

" press ctrl+z to undo
nnoremap <c-z> :u<cr>

" remove the highlight on searches
nnoremap <leader><space> :nohlsearch<cr>

" search word everywhere inside the opened folder
nnoremap <leader>z :Ag<cr>

" unfold all
nnoremap <leader>] zR

" fold all
nnoremap <leader>[ zM

" create a new tab
nnoremap <c-t> :tabnew<cr>

" toggle NERDTree
nnoremap <c-\> :NERDTreeTabsToggle<cr>

" toggle Prettier
nnoremap <leader>p :Prettier<cr>

" go to the last active tab
nnoremap <leader>0 :tablast<cr>

" go to the numbered tab which is 1-based
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt

" fzf file fuzzy search that respects .gitignore
" If in git directory, show only files that are committed, staged, or unstaged
" else use regular :Files
nnoremap <expr> <C-p> (len(system('git rev-parse')) ? ':Files' : ':GFiles --exclude-standard --others --cached')."\<cr>"

" Convert the current word to uppercase
nnoremap <c-u> viwU

" Edit the vimrc file
nnoremap <leader>ev :vsplit ~/.dotfiles/vim/vimrc.symlink<cr>

" Source the vimrc file
nnoremap <leader>sv :source ~/.vimrc<cr>

" Surround a word with double quotes
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel

" Surround a word with single quotes
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel

" Move to the beginning of the line
nnoremap H 0

" Move to the end of the line
nnoremap L $

" Add a semicolon to the end of the line
nnoremap <leader>; mqA;<esc>`q

" Remove the file's all trailing whitespaces
nnoremap <leader>t :%s/\s\+$//e<cr>
" }}}
" Abbreviations {{{
iabbrev @@ esculin.hao@gmail.com
iabbrev ccopy Copyright 2020 Cykoe, all rights reserved
iabbrev waht what
iabbrev tehn then
iabbrev whaat what
"}}}
" Themes {{{
colorscheme gruvbox
set background=dark    " Setting dark mode

" Highlight trailing whitespaces
match Error /\v +$/
"}}}
" External (for ignored uploaded settings){{{
try
  source ~/.external.vim
catch
endtry
" }}}
" Use marker folding method, three open and close curly braces {{{}}},
" and enable modeline to automatically fold this file when opend
" vim:foldmethod=marker:foldlevel=0
