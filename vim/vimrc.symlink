" _______ _________ _______  _______           _______  _______  _       _________ _______ 
"(  ____ \\__   __/(  ____ )(  ____ \|\     /|(  ___  )(  ____ )( \      \__   __/(  ____ \
"| (    \/   ) (   | (    )|| (    \/| )   ( || (   ) || (    )|| (         ) (   | (    \/
"| (_____    | |   | (____)|| |      | (___) || (___) || (____)|| |         | |   | (__    
"(_____  )   | |   |     __)| |      |  ___  ||  ___  ||     __)| |         | |   |  __)   
      ") |   | |   | (\ (   | |      | (   ) || (   ) || (\ (   | |         | |   | (      
"/\____) |___) (___| ) \ \__| (____/\| )   ( || )   ( || ) \ \__| (____/\___) (___| (____/\
"\_______)\_______/|/   \__/(_______/|/     \||/     \||/   \__/(_______/\_______/(_______/
"                                                                                          
" Plugin List {{{
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" Vundle package manager
Plugin 'VundleVim/Vundle.vim'

" File system explorer
Plugin 'scrooloose/nerdtree'

" A plugin of NERDTree showing git status flags 
Plugin 'xuyuanp/nerdtree-git-plugin'

" Show only one NERDTree in all tabs
Plugin 'jistr/vim-nerdtree-tabs'

" Code-completion engine for vim & neovim
Plugin 'neoclide/coc.nvim'

" Extra syntax and highlight for nerdtree files
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'

" Support filetype glyphs
Plugin 'ryanoasis/vim-devicons'

" Navigate using words
" <Leader><Leader>fo => all 'o' characters wil be highlighted
" <Leader><Leader>w => all words will be highlighted
Plugin 'easymotion/vim-easymotion'

" Moves line/selections up/down
Plugin 'matze/vim-move'

" Theme
Plugin 'morhetz/gruvbox'

" Emmet for vim
Plugin 'mattn/emmet-vim'

" Display syntax errors
Plugin 'vim-syntastic/syntastic'

" comment codes
Plugin 'preservim/nerdcommenter'

" Navigate seamlessly between vim and tmux splits
Plugin 'christoomey/vim-tmux-navigator'

" file finder
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf'

" enable multiple selections
Plugin 'terryma/vim-multiple-cursors'

" notes taking
Plugin 'vimwiki/vimwiki'

" EditorConfig plugin for vim
Plugin 'editorconfig/editorconfig-vim'

" cool status for vim
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

call vundle#end()
" }}}
" Vim options {{{
" Indention options
filetype plugin indent on " allow intelligent auto-indenting for each filetype
set tabstop=2 " spaces number when tabbing
set shiftwidth=2 " spaces number when shifting
set shiftround " round the indentation to nearest multiple of shiftwidth
set autoindent " new lines inherit the indentaton of previous lines
set expandtab " convert tabs to spaces

" Search options
set hlsearch " highlight searches
set ignorecase " ignore case when searching
set smartcase " switch to case-sensitive when search has uppercase

" Performance options
set lazyredraw " don't update screen during macro and script execution
set noshowcmd " show vim commands on the bottom-right corner
set showmatch " highlight matching [{()}]

" User interface options
set wildmenu " gui for suggestion in vim auto-completion
set ruler " show cursor position
colorscheme gruvbox " change color scheme
set background=dark " self-explanatory
set cursorline " highlight the current line under cursor
set nonumber
set relativenumber

" Text Rendering options
set encoding=utf-8 " supports unicode
set linebreak " avoid wrapping a line in the middle of a word
set scrolloff=1 " number of lines below the cursor
syntax enable " enable syntax highlighting
set wrap " enable line wrapping

" Code Folding options
set foldenable " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10 " avoid nested folds
set foldmethod=indent " fold based on indention levels

" Miscellaneous options
set confirm " ask before closing an unsaved file
set hidden " hide files in background, needed by TextEdit
set history=50 " undo limit
set nocompatible " avoid unexpected things that your distro might have made
set nobackup " no backup :)
set nowritebackup " no backup :)
set noswapfile " no backup :)
set completeopt-=preview " close auto-completion preview for coc
set ttimeoutlen=50 " time in milliseconds to wait for a key code sequence to complete
set clipboard=unnamed " connect to system clipboard
set modelines=1 " run specific commands in a file on the first and last line of .vimrc

set pastetoggle=<F2>
set showmode
" }}}
" Mappings {{{
" move vertically by visual line
nnoremap j gj
nnoremap k gk

" press ctrl+s saves the file
inoremap <C-s> <esc>:w<cr>
nnoremap <C-s> :w<cr>

" press ctrl+z undo
inoremap <c-z> <c-o>:u<CR>
nnoremap <c-z> :u<CR>

" remove the highlight on searches
nnoremap <leader><space> :nohlsearch<CR>

" map folding and unfolding all
nnoremap <C-[> zR
nnoremap <C-]> zM

" map Toggle NERDTree
map <C-\> :NERDTreeTabsToggle<CR>

" mapping for vim-move 
vmap <C-Down> <Plug>MoveBlockDown
vmap <C-Up> <Plug>MoveBlockUp
nmap <C-Up> <Plug>MoveLineUp
nmap <C-Right> <Plug>MoveLineRight
nmap <C-Left> <Plug>MoveLineLeft
nmap <C-Down> <Plug>MoveLineDown

" paste mode
nnoremap <F2> :set invpaste paste?<CR>

" fzf file fuzzy search that respects .gitignore
" If in git directory, show only files that are committed, staged, or unstaged
" else use regular :Files
nnoremap <expr> <C-p> (len(system('git rev-parse')) ? ':Files' : ':GFiles --exclude-standard --others --cached')."\<cr>"
" }}}
" Plugins Options {{{
"
" NerdTree config
" Close vim when NERDTree is the only window left
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Vimwiki config
let g:vimwiki_list = [{
  \'path': '~/vimwiki/','syntax': 'markdown','ext': '.md'}]

" Airline config
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#tabline#show_splits = 1

" status bar themes
" more here: https://github.com/vim-airline/vim-airline-themes/tree/master/autoload/airline/themes
let g:airline_theme='cool'
let g:airline_left_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_right_sep = ''

" populate airline symbols with powerline symbols
let g:airline_powerline_fonts = 1

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

" emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" tmux
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-j> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <nop> :TmuxNavigatePrevious<cr>

" NerdTree
let NERDTreeIgnore=['^node_modules$']

if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" Conquer of Completion
" Give more space for displaying messages
set cmdheight=2

" Having longer updatetime (default is 4000ms) leads to noticeable
" displays and poor ux
set updatetime=300

"  Don't pass messages to |ins-completion-menu|
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

let g:coc_global_extensions = [
  \ 'coc-angular',
  \ 'coc-tsserver',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-python',
  \ 'coc-json',
  \ 'coc-pairs',
  \ 'coc-snippets',
  \ 'coc-marketplace',
  \ 'coc-prettier',
  \ ]

" coc-prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" coc-definition
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" coc-rename
nmap <leader>rn <Plug>(coc-rename)V

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}
"
" vim:foldmethod=marker:foldlevel=0
