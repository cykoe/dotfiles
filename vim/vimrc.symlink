"            _
"           | |
"  ___ _   _| | _____   ___
" / __| | | | |/ / _ \ / _ \
" | (__| |_| |   < (_) |  __/
" \___|\__, |_|\_\___/ \___|
"       __/ |
"      |___/
"
" Plugin List {{{
" Required for Vundle
set nocompatible

" Required for Vundle
filetype off

" Required for Vundle
set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" Vundle package manager
Plugin 'VundleVim/Vundle.vim'

" practice vim with hardmode
Plugin 'wikitopian/hardmode'

Plugin 'kaicataldo/material.vim'

" tsx syntax highlighting
Plugin 'ianks/vim-tsx'

" sort lines
Plugin 'christoomey/vim-sort-motion'

" File system explorer
Plugin 'scrooloose/nerdtree'

" A plugin of NERDTree showing git status flags
Plugin 'xuyuanp/nerdtree-git-plugin'

" Show only one NERDTree in all tabs
Plugin 'jistr/vim-nerdtree-tabs'

" Code-completion engine for vim & neovim
Plugin 'neoclide/coc.nvim'

" Extra syntax and highlight for nerdtree files
Plugin 'tiagofumo/vim-nerdtree-syntax-highlight'

" Support filetype glyphs
Plugin 'ryanoasis/vim-devicons'

" Navigate using words
" <Leader><Leader>fo => all 'o' characters wil be highlighted
" <Leader><Leader>w => all words will be highlighted
Plugin 'easymotion/vim-easymotion'

" Moves line/selections up/down
Plugin 'matze/vim-move'

" Emmet for vim
Plugin 'mattn/emmet-vim'

" Display syntax errors
Plugin 'vim-syntastic/syntastic'

" comment codes
Plugin 'preservim/nerdcommenter'

" Navigate seamlessly between vim and tmux splits
Plugin 'christoomey/vim-tmux-navigator'

" file finder
Plugin 'junegunn/fzf.vim'
Plugin 'junegunn/fzf'

" enable multiple selections
Plugin 'terryma/vim-multiple-cursors'

" notes taking
Plugin 'vimwiki/vimwiki'

" EditorConfig plugin for vim
Plugin 'editorconfig/editorconfig-vim'

" cool status for vim
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" add parentheses, brakets, etc. to a block of code
Plugin 'tpope/vim-surround'

call vundle#end()

" Required for vundle
filetype plugin indent on
" }}}
" Options {{{

let mapleader = '\' " set the leader key

" Tab options
set tabstop=2 " set spaces numbers for tabbing
set expandtab " converts tabs to spaces

" Shifting options
set shiftwidth=2 " set spaces when shifting
set shiftround " rounds the indentation to nearest multiple of shiftwidth

" Searching options
set hlsearch " highlights searches
set ignorecase " ignore cases when searching
set smartcase " intelligent switch to case-sensitive when uppercase typed
set showmatch " highlights matching parentheses, braces, and brackets

" Performance options
set lazyredraw " don't update screen during macro and script execution
set noshowcmd " hide commands on the bottom-right corner
set cursorline " highlight the current line under cursor

" Line-number options
set nonumber " disable absolute line numbers
set relativenumber " use relative numbers in terms of current line
set numberwidth=2 " set line number column width (increase by 2)

" Text Rendering options
syntax enable " enable syntax highlighting
set encoding=utf-8 " supports unicode
set linebreak " avoid wrapping a line in the middle of a word
set scrolloff=1 " number of lines below the cursor
set wrap " enable line wrapping
set autoindent " new lines inherit the indentaton of previous lines

" Code Folding options
set foldenable " enable folding
set foldlevelstart=10 " open most folds by default
set foldnestmax=10 " avoid nested folds
set foldmethod=indent " fold based on indention levels

" Miscellaneous options
set confirm " ask before closing an unsaved file
set hidden " hide files in background, needed by TextEdit
set history=50 " undo limit
set nobackup " no backup :)
set nowritebackup " no backup :)
set noswapfile " no backup :)
set completeopt-=preview " close auto-completion preview for coc
set ttimeoutlen=50 " time in milliseconds to wait for a key code sequence to complete
set clipboard=unnamed " connect to system clipboard
set modelines=1 " run specific commands in a file on the first and last line of .vimrc
set pastetoggle=<F2> " toggle paste mode for texts from external application
" }}}
" Mappings {{{

" Editing/deleting from current cursor till the end
onoremap L $

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" press ctrl+s saves the file
inoremap <C-s> <esc>:w<cr>
nnoremap <C-s> :w<cr>

" press ctrl+z undo
inoremap <c-z> <c-o>:u<CR>
nnoremap <c-z> :u<CR>

" remove the highlight on searches
nnoremap <leader><space> :nohlsearch<CR>

" search word everywhere
nnoremap <leader>z :Ag<CR>

" map folding and unfolding all
nnoremap <C-[> zR
nnoremap <C-]> zM

" create a new tab and close a tab
nnoremap <C-t> :tabnew<CR>

" map Toggle NERDTree
map <C-\> :NERDTreeTabsToggle<CR>

nnoremap <leader>p :Prettier<CR>

" Go to tab by number
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt
noremap <leader>0 :tablast<cr>

" mapping for vim-move
vmap <C-Down> <Plug>MoveBlockDown
vmap <C-Up> <Plug>MoveBlockUp
nmap <C-Up> <Plug>MoveLineUp
nmap <C-Right> <Plug>MoveLineRight
nmap <C-Left> <Plug>MoveLineLeft
nmap <C-Down> <Plug>MoveLineDown

" toggle vim hard mode and easy mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" paste mode
nnoremap <F2> :set invpaste paste?<CR>

" fzf file fuzzy search that respects .gitignore
" If in git directory, show only files that are committed, staged, or unstaged
" else use regular :Files
nnoremap <expr> <C-p> (len(system('git rev-parse')) ? ':Files' : ':GFiles --exclude-standard --others --cached')."\<cr>"
" }}}
" Plugins Options {{{
"
" Close vim when NERDTree is the only window left
augroup close_nerd_tree
  autocmd!
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup end

" Enable vim hard mode
"augroup hard_mode
  "autocmd!
  "autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
"augroup end

" Vimwiki config
let g:vimwiki_list = [{
  \'path': '~/vimwiki/','syntax': 'markdown','ext': '.md'}]

" Airline config
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_splits = 1

" status bar themes
" more here: https://github.com/vim-airline/vim-airline-themes/tree/master/autoload/airline/themes
let g:airline_theme='onedark'
let g:airline_left_sep = ''
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline_right_sep = ''

" populate airline symbols with powerline symbols
let g:airline_powerline_fonts = 1

if &term =~ '256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    set t_ut=
endif

" emmet
let g:user_emmet_install_global = 0
augroup enable_emmet
  autocmd!
  autocmd FileType html,css,jsx EmmetInstall
augroup end

" tmux
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-j> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <nop> :TmuxNavigatePrevious<cr>

" NerdTree
let NERDTreeIgnore=['^node_modules$']

if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" Conquer of Completion
" Give more space for displaying messages
set cmdheight=2

" Having longer updatetime (default is 4000ms) leads to noticeable
" displays and poor ux
set updatetime=300

"  Don't pass messages to |ins-completion-menu|
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

let g:coc_global_extensions = [
  \ 'coc-angular',
  \ 'coc-tsserver',
  \ 'coc-html',
  \ 'coc-css',
  \ 'coc-python',
  \ 'coc-json',
  \ 'coc-pairs',
  \ 'coc-snippets',
  \ 'coc-marketplace',
  \ 'coc-prettier',
  \ ]

" coc-prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" coc-definition
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
augroup highlight_group
  autocmd!
  autocmd CursorHold * silent call CocActionAsync('highlight')
augroup end

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" coc-rename
nmap <leader>rn <Plug>(coc-rename)V

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

let g:ackprg = 'ag --nogroup --nocolor --column'
" }}}
" Learn {{{
" Move the current line down
nnoremap - ddp

" Move the current line up
nnoremap _ ddkP

" Convert the current word to uppercase in insert mode
inoremap <c-u> <esc>viwUi

" Convert the current word to uppercase in normal mode
nnoremap <c-u> viwU

" Define leader key
let mapleader = "\\"

" Edit the vimrc file
nnoremap <leader>ev :vsplit ~/.dotfiles/vim/vimrc.symlink<cr>

" Source the vimrc file
nnoremap <leader>sv :source ~/.vimrc<cr>

" Some abbreviations
iabbrev @@ esculin.hao@gmail.com
iabbrev ccopy Copyright 2020 Cykoe, all rights reserved
iabbrev waht what
iabbrev tehn then
iabbrev whaat what

" Surround a word with double quotes
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel

" Surround a word with single quotes
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel

" Move to the beginning of the line
nnoremap H 0

" Move to the end of the line
nnoremap L $

" Map escape to jk
inoremap jk <esc>

" Disable esc
inoremap <esc> <nop>

" Operator-pending for inside a parentheses
onoremap p i(
set backspace=indent,eol,start

augroup markdown
  autocmd!
  autocmd FileType md onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
augroup end
" Common to pair BufRead and BufNewFile

onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>

" Add a semicolon to the end of the line
nnoremap <leader>; mqA;<esc>`q

" Highlight trailing whitespaces
match Error /\v +$/

function! TrimTrailingWhiteSpaces()
  :%s/\s\+$//e
endfunction

nnoremap <leader>t :call TrimTrailingWhiteSpaces()<cr>

" }}}
" Themes {{{
let g:material_theme_style="ocean" " default | palenight | ocean | lighter | darker
colorscheme material " must put after the above line or style will be overrided

" enable true colors
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
"}}}
" External (for ignored uploaded settings){{{
try
  source ~/.external.vim
catch
endtry
" }}}
" vim:foldmethod=marker:foldlevel=0
